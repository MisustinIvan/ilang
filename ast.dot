digraph AST {
  node [shape=box];
  node1 [label="Program",color="lightblue"]
  node2 [label="Function Declaration",color="red"]
  node1 -> node2
  node3 [label="Name: magic"]
  node2 -> node3
  node4 [label="Return Type: int"]
  node2 -> node4
  node5 [label="Parameters",color="lightgreen"]
  node2 -> node5
  node6 [label="Parameter: int x"]
  node5 -> node6
  node7 [label="Parameter: int n"]
  node5 -> node7
  node8 [label="Body"]
  node2 -> node8
  node9 [label="BlockExpression",color="purple"]
  node8 -> node9
  node10 [label="BlockExpression",color="purple"]
  node9 -> node10
  node11 [label="Implicit Return Expression",color="lightgreen"]
  node10 -> node11
  node12 [label="Literal",color="green"]
  node13 [label="Type: string"]
  node12 -> node13
  node14 [label="Value: \"balls\""]
  node12 -> node14
  node11 -> node12
  node15 [label="Implicit Return Expression",color="lightgreen"]
  node9 -> node15
  node16 [label="ConditionalExpression",color="red"]
  node15 -> node16
  node17 [label="Condition"]
  node16 -> node17
  node18 [label="BinaryExpression",color="lightblue"]
  node17 -> node18
  node19 [label="Identifier: x",color="lightblue"]
  node18 -> node19
  node20 [label="Operator: LesserThan"]
  node18 -> node20
  node21 [label="Literal",color="green"]
  node22 [label="Type: int"]
  node21 -> node22
  node23 [label="Value: 10"]
  node21 -> node23
  node18 -> node21
  node24 [label="IfBody"]
  node16 -> node24
  node25 [label="BlockExpression",color="purple"]
  node24 -> node25
  node26 [label="Implicit Return Expression",color="lightgreen"]
  node25 -> node26
  node27 [label="BinaryExpression",color="lightblue"]
  node26 -> node27
  node28 [label="Identifier: x",color="lightblue"]
  node27 -> node28
  node29 [label="Operator: Addition"]
  node27 -> node29
  node30 [label="Identifier: n",color="lightblue"]
  node27 -> node30
  node31 [label="ElseBody"]
  node16 -> node31
  node32 [label="BlockExpression",color="purple"]
  node31 -> node32
  node33 [label="Implicit Return Expression",color="lightgreen"]
  node32 -> node33
  node34 [label="BinaryExpression",color="lightblue"]
  node33 -> node34
  node35 [label="Identifier: x",color="lightblue"]
  node34 -> node35
  node36 [label="Operator: Subtraction"]
  node34 -> node36
  node37 [label="Identifier: n",color="lightblue"]
  node34 -> node37
}
