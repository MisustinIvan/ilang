digraph AST {
  node [shape=box];
  node1 [label="Program",color="lightblue"]
  node2 [label="Function Declaration",color="red"]
  node1 -> node2
  node3 [label="Name: main"]
  node2 -> node3
  node4 [label="Return Type: int"]
  node2 -> node4
  node5 [label="Parameters",color="lightgreen"]
  node2 -> node5
  node6 [label="Body"]
  node2 -> node6
  node7 [label="BlockExpression",color="purple"]
  node6 -> node7
  node8 [label="BindExpression",color="orange"]
  node7 -> node8
  node9 [label="Left: a"]
  node8 -> node9
  node10 [label="Lookup Value: a#0"]
  node9 -> node10
  node11 [label="Type: int"]
  node8 -> node11
  node12 [label="Right"]
  node8 -> node12
  node13 [label="Literal",color="green"]
  node14 [label="Type: int"]
  node13 -> node14
  node15 [label="Value: 69"]
  node13 -> node15
  node12 -> node13
  node16 [label="BindExpression",color="orange"]
  node7 -> node16
  node17 [label="Left: b"]
  node16 -> node17
  node18 [label="Lookup Value: b#1"]
  node17 -> node18
  node19 [label="Type: int"]
  node16 -> node19
  node20 [label="Right"]
  node16 -> node20
  node21 [label="Literal",color="green"]
  node22 [label="Type: int"]
  node21 -> node22
  node23 [label="Value: 420"]
  node21 -> node23
  node20 -> node21
  node24 [label="ConditionalExpression",color="red"]
  node7 -> node24
  node25 [label="Condition"]
  node24 -> node25
  node26 [label="Literal",color="green"]
  node27 [label="Type: bool"]
  node26 -> node27
  node28 [label="Value: true"]
  node26 -> node28
  node25 -> node26
  node29 [label="IfBody"]
  node24 -> node29
  node30 [label="BlockExpression",color="purple"]
  node29 -> node30
  node31 [label="BindExpression",color="orange"]
  node30 -> node31
  node32 [label="Left: a"]
  node31 -> node32
  node33 [label="Lookup Value: a#2"]
  node32 -> node33
  node34 [label="Type: string"]
  node31 -> node34
  node35 [label="Right"]
  node31 -> node35
  node36 [label="Literal",color="green"]
  node37 [label="Type: string"]
  node36 -> node37
  node38 [label="Value: \"test\""]
  node36 -> node38
  node35 -> node36
  node39 [label="Implicit Return Expression",color="lightgreen"]
  node30 -> node39
  node40 [label="Identifier: a",color="lightblue"]
  node39 -> node40
  node41 [label="Lookup Value: a#2"]
  node40 -> node41
  node42 [label="ConditionalExpression",color="red"]
  node7 -> node42
  node43 [label="Condition"]
  node42 -> node43
  node44 [label="Literal",color="green"]
  node45 [label="Type: bool"]
  node44 -> node45
  node46 [label="Value: true"]
  node44 -> node46
  node43 -> node44
  node47 [label="IfBody"]
  node42 -> node47
  node48 [label="BlockExpression",color="purple"]
  node47 -> node48
  node49 [label="BindExpression",color="orange"]
  node48 -> node49
  node50 [label="Left: b"]
  node49 -> node50
  node51 [label="Lookup Value: b#3"]
  node50 -> node51
  node52 [label="Type: bool"]
  node49 -> node52
  node53 [label="Right"]
  node49 -> node53
  node54 [label="Literal",color="green"]
  node55 [label="Type: bool"]
  node54 -> node55
  node56 [label="Value: false"]
  node54 -> node56
  node53 -> node54
  node57 [label="Implicit Return Expression",color="lightgreen"]
  node48 -> node57
  node58 [label="Identifier: b",color="lightblue"]
  node57 -> node58
  node59 [label="Lookup Value: b#3"]
  node58 -> node59
  node60 [label="Implicit Return Expression",color="lightgreen"]
  node7 -> node60
  node61 [label="Identifier: a",color="lightblue"]
  node60 -> node61
  node62 [label="Lookup Value: a#0"]
  node61 -> node62
}
