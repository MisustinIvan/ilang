digraph AST {
  node [shape=box];
  node1 [label="Program"]
  node2 [label="Function Declaration"]
  node3 [label="Name: test"]
  node2 -> node3
  node4 [label="Return Type: Void"]
  node2 -> node4
  node5 [label="Parameters"]
  node2 -> node5
  node6 [label="Parameter: Boolean a"]
  node5 -> node6
  node7 [label="Parameter: Integer b"]
  node5 -> node7
  node1 -> node2
  node8 [label="Body"]
  node2 -> node8
  node9 [label="Statement"]
  node8 -> node9
  node10 [label="Type: Assignment"]
  node9 -> node10
  node11 [label="Left: c"]
  node9 -> node11
  node12 [label="Right"]
  node9 -> node12
  node13 [label="Expression"]
  node12 -> node13
  node14 [label="Type: Literal"]
  node13 -> node14
  node15 [label="Literal Type: Integer"]
  node13 -> node15
  node16 [label="Value: 10"]
  node13 -> node16
  node17 [label="Statement"]
  node8 -> node17
  node18 [label="Type: Function Call"]
  node17 -> node18
  node19 [label="Function name: printf"]
  node17 -> node19
  node20 [label="Args"]
  node17 -> node20
  node21 [label="Expression"]
  node20 -> node21
  node22 [label="Type: Literal"]
  node21 -> node22
  node23 [label="Literal Type: String"]
  node21 -> node23
  node24 [label="Value: \"%d\""]
  node21 -> node24
  node25 [label="Expression"]
  node20 -> node25
  node26 [label="Type: Function Call"]
  node25 -> node26
  node27 [label="Function name: ligma"]
  node25 -> node27
  node28 [label="Args"]
  node25 -> node28
  node29 [label="Expression"]
  node28 -> node29
  node30 [label="Type: Literal"]
  node29 -> node30
  node31 [label="Literal Type: String"]
  node29 -> node31
  node32 [label="Value: \"balls\""]
  node29 -> node32
  node33 [label="Function Declaration"]
  node34 [label="Name: test2"]
  node33 -> node34
  node35 [label="Return Type: Integer"]
  node33 -> node35
  node36 [label="Parameters"]
  node33 -> node36
  node1 -> node33
  node37 [label="Body"]
  node33 -> node37
  node38 [label="Statement"]
  node37 -> node38
  node39 [label="Type: Return"]
  node38 -> node39
  node40 [label="Return Value"]
  node38 -> node40
  node41 [label="Expression"]
  node40 -> node41
  node42 [label="Type: Literal"]
  node41 -> node42
  node43 [label="Literal Type: Integer"]
  node41 -> node43
  node44 [label="Value: 69"]
  node41 -> node44
}
